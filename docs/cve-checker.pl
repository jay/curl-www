#!/usr/bin/perl

require "./vuln.pm";

# 0 page
# 1 first vulnerable version
# 2 last vulnerable version
# 3 name
# 4 CVE
# 5 announce date (YYYYMMDD)
# 6 report to the project date (YYYYMMDD),
# 7 CWE
# 8 award money (USD)
# 9 area (single word)
# 10 C-issue (-, OVERFLOW, OVERREAD, DOUBLE_FREE, USE_AFTER_FREE, NULL_MISTAKE,
# 11 where: tool/lib/both
# 12 severity: low, medium, high, critical


# retracted CVEs, still present as files
my %whitelist = (
    "CVE-2019-15601.md" => 1,
    "CVE-2020-19909.md" => 1,
    "CVE-2023-52071.md" => 1,
    "CVE-2023-32001.md" => 1,
    );

my %faff;
my %laff;
my %vcwe;
my %title;
my %sev;

for(@vuln) {
    my @a=split('\|');

    $faff{$a[4]} = $a[1];
    $laff{$a[4]} = $a[2];
    $vcwe{$a[4]} = $a[7];
    $title{$a[4]} = $a[3];
    $sev{$a[4]} = $a[12];
}

# Verify the Markdown files for security advisories

# These sections must exist, in this order
my @sections = (
    "VULNERABILITY",
    "INFO",
    "AFFECTED VERSIONS",
    "SOLUTION",
    "TIMELINE",
    "CREDITS"
    );

sub checkfile {
    my ($file) = @_;

    if($whitelist{$file}) {
        return 0;
    }

    my $cve = $file;
    $cve =~ s/\.md\z//g;
    if(!$faff{$cve}) {
        printf STDERR "$file:%d:error: bad CVE? no affected version found\n";
        return 1;
    }

    open(F, "<$file");
    my $i = 0;
    my $line = 0;
    my ($cwefound, $affected, $notaffected, $firstaff, $severityfound);
    my @secline;
    while(<F>) {
        my $l = $_;
        chomp $l;
        if(!$line) {
            if($l ne $title{$cve}) {
                print STDERR "$file:$line:error: title mismatch with vuln.pm: $title{$cve} vs $l\n";
                return 1;
            }
        }
        $line++;
        if($l =~ /^$sections[$i]/) {
            $secline[$i]= $line;
            $i++;
            last if($i == 6);
        }
        if($l =~ /^ *(CWE-(\d+): .*)/) {
            $cwefound = $1;
            if($vcwe{$cve} ne $cwefound) {
                print STDERR "$file:$line:error: CWE mismatch with vuln.pm: $vcwe{$cve} vs $cwefound\n";
                return 1;
            }
        }
        if($l =~ /^ *Severity: (.*)/) {
            $severityfound = $1;
            if(lc($sev{$cve}) ne lc($severityfound)) {
                print STDERR "$file:$line:error: Severityfound mismatch with vuln.pm: $sev{$cve} vs $severityfound\n";
                return 1;
            }
        }
        if($l =~ /^- Affected versions: [^0-9]*([0-9.]+) to and including [^0-9]*([0-9.]+)/) {
            $firstaff = $1;
            $lastaff = $2;
            if($firstaff ne $faff{$cve}) {
                printf STDERR "$file:%d:error: Affected version mismatch with vuln.pm\n",
                    $secline[2];
                return 1;
            }
            elsif($lastaff ne $laff{$cve}) {
                printf STDERR "$file:%d:error: Last affected version mismatch with vuln.pm\n",
                    $secline[2];
                return 1;
            }
            $affected = 1;
        }
        elsif($l =~ /^- Affected version: [^0-9]*([0-9.]+)/) {
            $firstaff = $1;
            $lastaff = $1;
            if($firstaff ne $faff{$cve}) {
                printf STDERR "$file:%d:error: Affected version mismatch with vuln.pm\n",
                    $secline[2];
                return 1;
            }
            elsif($lastaff ne $laff{$cve}) {
                printf STDERR "$file:%d:error: Last affected version mismatch with vuln.pm\n",
                    $secline[2];
                return 1;
            }
            $affected = 1;
        }
        if($firstaff eq "4.0") {
            # special case if existing from 4.0
            if($l =~ /^- Not affected versions: .* >= /) {
                $notaffected = 1;
            }
        }
        elsif($l =~ /^- Not affected versions: .* < .* and .*>= (.*)/) {
            $notaffected = 1;
            if($1 !~ /^[1-9]/) {
                print STDERR "$file:$line:error: \"not affected versions\" must specify only the version after >= ($1)\n";
                return 3;
            }
        }
    }
    close(F);
    if($i != 6) {
        printf STDERR "$file:%d:error: No %s section after %s\n",
            $i ? $secline[$i-1]: 0,
            $sections[$i], $i? $sections[$i -1 ] : "start";
        return 1;
    }
    elsif(!$cwefound) {
        printf STDERR "$file:%d:error: No CWE found in INFO\n",
            $secline[2];
        return 1;
    }
    elsif(!$severityfound) {
        printf STDERR "$file:%d:error: No Severity found in INFO\n", $secline[2];
        return 1;
    }
    elsif(!$affected) {
        printf STDERR "$file:%d:error: \"affected versions\" not found in AFFECTED VERSIONS\n",
            $secline[3];
        return 1;
    }
    elsif(!$notaffected) {
        printf STDERR "$file:%d:error: \"not affected versions\" not found in AFFECTED VERSIONS [$firstaff]\n",
            $secline[3];
        return 1;
    }
    return 0;
}

exit checkfile($ARGV[0]);
